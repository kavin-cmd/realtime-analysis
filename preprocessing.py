import pandas as pd
from sklearn.preprocessing import MinMaxScaler

def preprocess_data(df):
    """
    Preprocess the stock data for analysis.

    Parameters:
    - df: Pandas DataFrame containing the stock data.

    Returns:
    - df: Preprocessed DataFrame.
    """
    if df.empty:
        raise ValueError("Input DataFrame is empty.")

    # Handle missing values
    df.dropna(inplace=True)
    
    if df.empty:
        raise ValueError("DataFrame became empty after dropping NaN values.")

    # Feature engineering: Create moving averages
    df['ma50'] = df['close'].rolling(window=50).mean()
    df['ma200'] = df['close'].rolling(window=200).mean()
    df['rsi'] = compute_rsi(df['close'])
    
    # Drop rows with NaN values generated by moving averages
    df.dropna(inplace=True)
    
    if df.empty:
        raise ValueError("DataFrame became empty after feature engineering.")

    # Normalize/Scale the data
    scaler = MinMaxScaler()
    df[['open', 'high', 'low', 'close', 'volume', 'ma50', 'ma200', 'rsi']] = scaler.fit_transform(
        df[['open', 'high', 'low', 'close', 'volume', 'ma50', 'ma200', 'rsi']]
    )
    
    return df

def compute_rsi(series, period=14):
    """
    Compute the Relative Strength Index (RSI) for a given series.

    Parameters:
    - series: Pandas Series of stock prices.
    - period: The period over which to compute the RSI.

    Returns:
    - rsi: Pandas Series containing the RSI values.
    """
    delta = series.diff(1)
    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi
