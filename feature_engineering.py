import pandas as pd

def create_features(df):
    """
    Create new features for stock data analysis.
    
    Parameters:
    - df: Pandas DataFrame containing the stock data.
    
    Returns:
    - df: DataFrame with new features.
    """
    # Moving Averages
    df['ma50'] = df['close'].rolling(window=50).mean()
    df['ma200'] = df['close'].rolling(window=200).mean()
    
    # Relative Strength Index (RSI)
    df['rsi'] = compute_rsi(df['close'])
    
    # Moving Average Convergence Divergence (MACD)
    df['ema12'] = df['close'].ewm(span=12, adjust=False).mean()
    df['ema26'] = df['close'].ewm(span=26, adjust=False).mean()
    df['macd'] = df['ema12'] - df['ema26']
    df['signal_line'] = df['macd'].ewm(span=9, adjust=False).mean()
    
    # Bollinger Bands
    df['rolling_mean'] = df['close'].rolling(window=20).mean()
    df['rolling_std'] = df['close'].rolling(window=20).std()
    df['bollinger_upper'] = df['rolling_mean'] + (df['rolling_std'] * 2)
    df['bollinger_lower'] = df['rolling_mean'] - (df['rolling_std'] * 2)
    
    # Volume-Weighted Average Price (VWAP)
    df['vwap'] = (df['volume'] * (df['high'] + df['low'] + df['close']) / 3).cumsum() / df['volume'].cumsum()
    
    # Drop rows with NaN values generated by feature calculations
    df.dropna(inplace=True)
    
    return df

def compute_rsi(series, period=14):
    """
    Compute the Relative Strength Index (RSI) for a given series.
    
    Parameters:
    - series: Pandas Series of stock prices.
    - period: The period over which to compute the RSI.
    
    Returns:
    - rsi: Pandas Series containing the RSI values.
    """
    delta = series.diff(1)
    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# Example usage:
# df = fetch_stock_data('OHYFACJD1WUOBAX6', 'AAPL')
# df_preprocessed = preprocess_data(df)
# df_with_features = create_features(df_preprocessed)
# print(df_with_features.head())
